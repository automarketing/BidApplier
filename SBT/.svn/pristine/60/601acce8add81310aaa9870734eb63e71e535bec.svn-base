var CropHelper = function ()
{
    var CropHelperObject = new Object();

    var Props = new Object();

    Props.CroppedImageCopyId = "CroppedImageCopy";
    Props.OriginalShapeId = "";

    Props.CropLeft = 0;
    Props.CropTop = 0;
    Props.CropHeight = 0;
    Props.CropWidth = 0;

    
    Props.CropViewScale;
    Props.ImageWidth = 0;
    Props.ImageHeight = 0;

    Props.CropAction = "";
    Props.ResizePageX = 0;
    Props.ResizePageY = 0;
    Props.CropResizeDirection = "";



    function PrepareShapePostModalClosure(activeShape)
    {
        return function (e)
        {
            PrepareShapePostModal(e, activeShape);
        };
    };

    function PrepareShapePostModal(e, activeShape)
    {
        Props.CropAction = "";


        var cropAreaSvg = $("#CropAreaSvg");

        var clone = $("#" + activeShape.Id).clone();

        StoryboardContainer.UpdateGradientIds(clone);

        Props.OriginalShapeId = activeShape.Id;

        clone.attr("id", Props.CroppedImageCopyId);
        clone.attr("class", "");


        // Remove selection box and clip-path defs if present
        clone.find("[id$='selection_box'], [id$='_defs']").remove();

        // If there is a crop-group, reset it
        clone.find("[id$='cropGroup']").removeAttr("clip-path").attr("id", Props.CroppedImageCopyId + "_cropGroup");

        // Translate the clone by 20px in both directions
        var scale = clone.find("[id$='_scale']").attr("id", Props.CroppedImageCopyId + "_scale");
        clone.find("[id$='_natural']").attr("id", Props.CroppedImageCopyId + "_natural");

        scale.attr("transform", "scale(1,1)");

        cropAreaSvg.children().remove();

        cropAreaSvg.attr("width", "450");
        cropAreaSvg.attr("height", "450");

        cropAreaSvg.append(clone);

        var bb = document.getElementById(Props.CroppedImageCopyId).getBBox();
        Props.CropViewScale = 430 / Math.max(bb.width, bb.height);
        scale.attr("transform", "scale(" + Props.CropViewScale + ")");

        // NO FUCKING clue why this needs to happen here... but the bounding box of the svg is getting moved...  i feel like this happened elsewhere and we solved it...  is it due to bootstrap modal windows? //abs 1/13/14
        clone.attr("transform", "translate(10,10)");

        bb = document.getElementById(Props.CroppedImageCopyId).getBBox();

        Props.CropLeft = 0;
        Props.CropTop = 0;
        Props.CropWidth = bb.width;
        Props.CropHeight = bb.height;

        cropAreaSvg.attr("width", Props.CropWidth + 20);
        cropAreaSvg.attr("height", Props.CropHeight + 20);

        Props.ImageHeight = parseFloat(cropAreaSvg.attr("height"));
        Props.ImageWidth = parseFloat(cropAreaSvg.attr("width"));

        if (activeShape.UseClipping)
        {
            Props.CropLeft = activeShape.ClipX * Props.CropViewScale;
            Props.CropTop = activeShape.ClipY * Props.CropViewScale;
            Props.CropWidth = activeShape.ClipWidth * Props.CropViewScale;
            Props.CropHeight = activeShape.ClipHeight * Props.CropViewScale;
        }

        cropAreaSvg.mousemove(HandleCropMoveClosure());
        cropAreaSvg.mouseleave(StopCropResizeClosure());
        cropAreaSvg.mouseup(StopCropResizeClosure());
        cropAreaSvg.mousedown(StartCropAreaMoveClosure());

        cropAreaSvg.css("cursor", "hand");

        AddSelectors();

    };

    //#region "Selectors"
    function AddSelectors()
    {
        var g = $("#croppedImageCopy_ClipArea");
        if (g !== null || g.length > 0)
        {
            g.detach();
        }
        g = SvgCreator.CreateSvgGroup("croppedImageCopy_ClipArea");

        $("#" + Props.CroppedImageCopyId).append(g);


        g.appendChild(SvgCreator.AddRect(Props.CropLeft, Props.CropTop, Props.CropWidth, Props.CropHeight, "black", "red", "4,4", ".25", "CropAreaBox"));


        if (MyBrowserProperties.IsMobile)
        {
            AddMobileSelectors(g);
        }
        else
        {
            AddComputerSelectors(g);
        }
    };

    function AddMobileSelectors(g)
    {
        var cropAreaBox = $("#CropAreaBox");
        cropAreaBox.css("border-width", 5);

        var strokeColor = "#AAA393";
        var fillColor = "#6285C7";

        var left = Props.CropLeft;
        var right = Props.CropWidth + Props.CropLeft;
        var top = Props.CropTop;
        var bottom = Props.CropHeight + Props.CropTop;
        var circleSize = 13;

        g.appendChild(SvgCreator.AddCircle(left, top, circleSize, strokeColor, fillColor, Props.CroppedImageCopyId + "_nw_circle", "ResizeNW"));
        g.appendChild(SvgCreator.AddCircle(right, top, circleSize, strokeColor, fillColor, Props.CroppedImageCopyId + "_ne_circle", "ResizeNE"));
        g.appendChild(SvgCreator.AddCircle(left, bottom, circleSize, strokeColor, fillColor, Props.CroppedImageCopyId + "_sw_circle", "ResizeNE"));
        g.appendChild(SvgCreator.AddCircle(right, bottom, circleSize, strokeColor, fillColor, Props.CroppedImageCopyId + "_se_circle", "ResizeNW"));

        var a = fillColor;
        fillColor = strokeColor;
        strokeColor = a;
        var middleX = (left + right) / 2;
        var middleY = (top + bottom) / 2;
        g.appendChild(SvgCreator.AddCircle(middleX, top, circleSize - 2, strokeColor, fillColor, Props.CroppedImageCopyId + "_n_circle", "ResizeV"));
        g.appendChild(SvgCreator.AddCircle(middleX, bottom, circleSize - 2, strokeColor, fillColor, Props.CroppedImageCopyId + "_s_circle", "ResizeV"));
        g.appendChild(SvgCreator.AddCircle(left, middleY, circleSize - 2, strokeColor, fillColor, Props.CroppedImageCopyId + "_w_circle", "ResizeH"));
        g.appendChild(SvgCreator.AddCircle(right, middleY, circleSize - 2, strokeColor, fillColor, Props.CroppedImageCopyId + "_e_circle", "ResizeH"));

        PrivateSetTouchyEdgeHandlers(Props.CroppedImageCopyId + "_ne_circle", HandleTouchyCropResizeClosure(ResizeEnum.NE));
        PrivateSetTouchyEdgeHandlers(Props.CroppedImageCopyId + "_nw_circle", HandleTouchyCropResizeClosure(ResizeEnum.NW));
        PrivateSetTouchyEdgeHandlers(Props.CroppedImageCopyId + "_se_circle", HandleTouchyCropResizeClosure(ResizeEnum.SE));
        PrivateSetTouchyEdgeHandlers(Props.CroppedImageCopyId + "_sw_circle", HandleTouchyCropResizeClosure(ResizeEnum.SW));

        PrivateSetTouchyEdgeHandlers(Props.CroppedImageCopyId + "_n_circle", HandleTouchyCropResizeClosure(ResizeEnum.N));
        PrivateSetTouchyEdgeHandlers(Props.CroppedImageCopyId + "_s_circle", HandleTouchyCropResizeClosure(ResizeEnum.S));
        PrivateSetTouchyEdgeHandlers(Props.CroppedImageCopyId + "_e_circle", HandleTouchyCropResizeClosure(ResizeEnum.E));
        PrivateSetTouchyEdgeHandlers(Props.CroppedImageCopyId + "_w_circle", HandleTouchyCropResizeClosure(ResizeEnum.W));

       PrivateSetTouchyEdgeHandlers("CropAreaBox" , HandleTouchyCropMoveClosure());
    };

    function PrivateSetTouchyEdgeHandlers(id, touchyDragEvent)
    {
        $("#" + id).bind('touchy-drag', touchyDragEvent);
        //$("#" + id).data('touchy-drag').settings.msHoldThresh = 10;
    }

    function AddComputerSelectors(g)
    {
        var strokeColor = "#AAA393";
        var fillColor = "#6285C7";

        var left = Props.CropLeft;
        var right = Props.CropWidth + Props.CropLeft;
        var top = Props.CropTop;
        var bottom = Props.CropHeight + Props.CropTop;
        var circleSize = 5;

        if (MyBrowserProperties.IsMobile)
        {
            circleSize = 10;
        }

        g.appendChild(SvgCreator.AddCircle(left, top, circleSize, strokeColor, fillColor, Props.CroppedImageCopyId + "_nw_circle", "ResizeNW"));
        g.appendChild(SvgCreator.AddCircle(right, top, circleSize, strokeColor, fillColor, Props.CroppedImageCopyId + "_ne_circle", "ResizeNE"));
        g.appendChild(SvgCreator.AddCircle(left, bottom, circleSize, strokeColor, fillColor, Props.CroppedImageCopyId + "_sw_circle", "ResizeNE"));
        g.appendChild(SvgCreator.AddCircle(right, bottom, circleSize, strokeColor, fillColor, Props.CroppedImageCopyId + "_se_circle", "ResizeNW"));

        var a = fillColor;
        fillColor = strokeColor;
        strokeColor = a;
        var middleX = (left + right) / 2;
        var middleY = (top + bottom) / 2;
        g.appendChild(SvgCreator.AddCircle(middleX, top, circleSize - 2, strokeColor, fillColor, Props.CroppedImageCopyId + "_n_circle", "ResizeV"));
        g.appendChild(SvgCreator.AddCircle(middleX, bottom, circleSize - 2, strokeColor, fillColor, Props.CroppedImageCopyId + "_s_circle", "ResizeV"));
        g.appendChild(SvgCreator.AddCircle(left, middleY, circleSize - 2, strokeColor, fillColor, Props.CroppedImageCopyId + "_w_circle", "ResizeH"));
        g.appendChild(SvgCreator.AddCircle(right, middleY, circleSize - 2, strokeColor, fillColor, Props.CroppedImageCopyId + "_e_circle", "ResizeH"));

        Private_SetEdgeHandlers(Props.CroppedImageCopyId + "_ne_circle", StartCropResizeClosure(ResizeEnum.NE));
        Private_SetEdgeHandlers(Props.CroppedImageCopyId + "_nw_circle", StartCropResizeClosure(ResizeEnum.NW));
        Private_SetEdgeHandlers(Props.CroppedImageCopyId + "_se_circle", StartCropResizeClosure(ResizeEnum.SE));
        Private_SetEdgeHandlers(Props.CroppedImageCopyId + "_sw_circle", StartCropResizeClosure(ResizeEnum.SW));

        Private_SetEdgeHandlers(Props.CroppedImageCopyId + "_n_circle", StartCropResizeClosure(ResizeEnum.N));
        Private_SetEdgeHandlers(Props.CroppedImageCopyId + "_s_circle", StartCropResizeClosure(ResizeEnum.S));
        Private_SetEdgeHandlers(Props.CroppedImageCopyId + "_e_circle", StartCropResizeClosure(ResizeEnum.E));
        Private_SetEdgeHandlers(Props.CroppedImageCopyId + "_w_circle", StartCropResizeClosure(ResizeEnum.W));

        //var cropAreaBox = $("#CropAreaBox");
        //cropAreaBox.css("cursor", "hand");

        //this.Private_SetEdgeHandlers("CropAreaBox", StartCropMove, MoveCropMove, StopCropMove);
    };

    function Private_SetEdgeHandlers(id, mouseDownEvent)
    {
        $("#" + id).mousedown(mouseDownEvent);
    };

    function UpdateSelectors()
    {
        var cropAreaBox = $("#CropAreaBox");

        var nw_circle = $("#" + Props.CroppedImageCopyId + "_nw_circle");
        var ne_circle = $("#" + Props.CroppedImageCopyId + "_ne_circle");
        var sw_circle = $("#" + Props.CroppedImageCopyId + "_sw_circle");
        var se_circle = $("#" + Props.CroppedImageCopyId + "_se_circle");

        var n_circle = $("#" + Props.CroppedImageCopyId + "_n_circle ");
        var s_circle = $("#" + Props.CroppedImageCopyId + "_s_circle ");
        var w_circle = $("#" + Props.CroppedImageCopyId + "_w_circle ");
        var e_circle = $("#" + Props.CroppedImageCopyId + "_e_circle ");

        var left = Props.CropLeft;
        var right = Props.CropWidth + Props.CropLeft;
        var top = Props.CropTop;
        var bottom = Props.CropHeight + Props.CropTop;
        var middleX = (left + right) / 2;
        var middleY = (top + bottom) / 2;

        SvgCreator.UpdateRectangle(cropAreaBox, Props.CropLeft, Props.CropTop, Props.CropWidth, Props.CropHeight);


        SvgCreator.UpdateCircle(nw_circle, left, top);
        SvgCreator.UpdateCircle(ne_circle, right, top);
        SvgCreator.UpdateCircle(sw_circle, left, bottom);
        SvgCreator.UpdateCircle(se_circle, right, bottom);

        SvgCreator.UpdateCircle(n_circle, middleX, top);
        SvgCreator.UpdateCircle(s_circle, middleX, bottom);
        SvgCreator.UpdateCircle(w_circle, left, middleY);
        SvgCreator.UpdateCircle(e_circle, right, middleY);
    }

    //#endregion
    function UpdateCropBox(deltaX, deltaY)
    {
        switch (Props.CropResizeDirection)
        {
            case ResizeEnum.NW:
            case ResizeEnum.SE:
                {
                    deltaX = Math.min(deltaX, deltaY);

                    deltaY = (deltaX / Props.CropWidth) * Props.CropHeight;

                    break;
                }
            case ResizeEnum.NE:
            case ResizeEnum.SW:
                {
                    var delta = Math.min(Math.abs(deltaX), Math.abs(deltaY));
                    deltaY = (delta / Props.CropWidth) * Props.CropHeight;

                    if (deltaX > 0)
                    {
                        deltaX = delta;
                        deltaY *= -1;
                    }
                    else
                    {
                        deltaX = delta * -1;
                    }

                    break;
                }

        }
        // handle X changes first
        switch (Props.CropResizeDirection)
        {
            case ResizeEnum.W:
            case ResizeEnum.NW:
            case ResizeEnum.SW:
                {
                    Props.CropLeft += deltaX;
                    Props.CropWidth -= deltaX;
                    break;
                }
            case ResizeEnum.E:
            case ResizeEnum.NE:
            case ResizeEnum.SE:
                {
                    //MyCroppedImage.CropLeft += deltaX;
                    Props.CropWidth += deltaX;
                    break;
                }
        }

        // handle Y changes first
        switch (Props.CropResizeDirection)
        {
            case ResizeEnum.N:
            case ResizeEnum.NW:
            case ResizeEnum.NE:
                {
                    Props.CropTop += deltaY;
                    Props.CropHeight -= deltaY;
                    break;
                }
            case ResizeEnum.S:
            case ResizeEnum.SW:
            case ResizeEnum.SE:
                {
                    //MyCroppedImage.CropLeft += deltaX;
                    Props.CropHeight += deltaY;
                    break;
                }
        }

        UpdateSelectors();
    };

    function MoveCropBox(deltaX, deltaY)
    {
        Props.CropTop += deltaY;
        Props.CropLeft += deltaX;

        Props.CropTop = Props.CropTop < 0 ? 0 : Props.CropTop;
        Props.CropTop = Props.CropTop > (Props.ImageHeight - Props.CropHeight - 20) ? Props.ImageHeight - Props.CropHeight - 20 : Props.CropTop;

        Props.CropLeft = Props.CropLeft < 0 ? 0 : Props.CropLeft;
        Props.CropLeft = Props.CropLeft > (Props.ImageWidth - Props.CropWidth-20 ) ? (Props.ImageWidth - Props.CropWidth-20 ) : Props.CropLeft;
        
        UpdateSelectors();
    };

    function HandleTouchyCropResizeClosure(cropResizeDirection)
    {
        return function (event, phase, $target, data)
        {
            if (phase != "move")
            {
                return;
            }
            Props.CropResizeDirection = cropResizeDirection;

            if (Props.CropResizeDirection == null || Props.CropResizeDirection == undefined)
                return;

            var deltaX = data.movePoint.x - data.lastMovePoint.x;
            var deltaY = data.movePoint.y - data.lastMovePoint.y;

            UpdateCropBox(deltaX, deltaY);
        }

    };

    function HandleTouchyCropMoveClosure(cropResizeDirection)
    {
        return function (event, phase, $target, data)
        {
            if (phase != "move")
            {
                return;
            }

            var deltaX = data.movePoint.x - data.lastMovePoint.x;
            var deltaY = data.movePoint.y - data.lastMovePoint.y;

            MoveCropBox(deltaX, deltaY);
        }

    };

    function StartCropResizeClosure(cropResizeDirection)
    {
        return function (e)
        {
            Props.CropAction = "Resize";
            Props.ResizePageX = e.pageX;
            Props.ResizePageY = e.pageY;

            Props.CropResizeDirection = cropResizeDirection;

            e.stopPropagation();
        };
    };

    function StartCropAreaMoveClosure()
    {
        return function (e)
        {
            Props.CropAction = "Move";
            Props.ResizePageX = e.pageX;
            Props.ResizePageY = e.pageY;

            e.stopPropagation();
        };
    }

    function HandleCropMoveClosure()
    {
        return function (e)
        {
            if (Props.CropAction == "")
                return;

            deltaX = e.pageX - Props.ResizePageX;
            deltaY = e.pageY - Props.ResizePageY;


            Props.ResizePageX = e.pageX;
            Props.ResizePageY = e.pageY;

            if (Props.CropAction == "Resize")
                UpdateCropBox(deltaX, deltaY);

            else if (Props.CropAction == "Move")
                MoveCropBox(deltaX, deltaY);
        };
    };

    function StopCropResizeClosure()
    {
        return function ()
        {
            Props.CropAction = "";
        };
    };

    function GetImageBeingCropped()
    {
        var active = MyShapesState.Public_GetFirstSelectedShapeState();;

        if (active === null)
        {
            active = MyShapesState.Public_GetShapeStateById(Props.OriginalShapeId);
        }

        return active;
    };

    CropHelperObject.ShowCropDialog = function (activeShape)
    {
        MyPointers.Dialog_CropImage.one('shown.bs.modal', PrepareShapePostModalClosure(activeShape));

        //prevent showing the previous crop
        var cropAreaSvg = $("#CropAreaSvg");
        cropAreaSvg.children().remove();

        MyPointers.Dialog_CropImage.modal();
    };

    CropHelperObject.RemoveCrop = function ()
    {
        var active = GetImageBeingCropped();
        active.UseClipping = false;
        active.UpdateDrawing();
        MyPointers.Dialog_CropImage.modal('hide');

        UndoManager.register(undefined, UndoCrop, [active.Id, true, active.ClipX, active.ClipY, active.ClipWidth, active.ClipHeight], '',
                             undefined, UndoCrop, [active.Id, active.UseClipping, active.ClipX, active.ClipY, active.ClipWidth, active.ClipHeight], '');
    };

    CropHelperObject.CancelCrop = function ()
    {
        MyPointers.Dialog_CropImage.modal('hide');
        var active = GetImageBeingCropped();
        active.UpdateDrawing();
    };

    CropHelperObject.UpdateCrop = function ()
    {
        if (MyBrowserProperties.IsMobile)
        {
            $.touchyOptions.useDelegation = true;
        }

        var active = GetImageBeingCropped();

        var undoUseClipping = active.UseClipping;
        var undoClipX = active.ClipX;
        var undoClipY = active.ClipY;
        var undoClipWidth = active.ClipWidth;
        var undoClipHeight = active.ClipHeight;

        active.UseClipping = true;
        active.ClipX = Props.CropLeft / Props.CropViewScale;
        active.ClipY = Props.CropTop / Props.CropViewScale;
        active.ClipWidth = Props.CropWidth / Props.CropViewScale;
        active.ClipHeight = Props.CropHeight / Props.CropViewScale;

        var bb = active.GetBBox(false);  // this was assuming the value was true, but it is actually false...

        if (active.ClipX < 0)
        {
            active.ClipWidth += active.ClipX;
            active.ClipX = 0;
        }

        if (active.ClipY < 0)
        {
            active.ClipHeight += active.ClipY;
            active.ClipY = 0;
        }

        if (active.ClipWidth < 10)
            active.ClipWidth = 10;

        if (active.ClipHeight < 10)
            active.ClipHeight = 10;

        if (active.ClipHeight > (bb.height / active.ScaleY))
            active.ClipHeight = bb.height / active.ScaleY;

        if (active.ClipWidth > (bb.width / active.ScaleX))
            active.ClipWidth = bb.width / active.ScaleX;

        UpdateActiveDrawing();
        UpdateActiveDrawing();// need to call it twice for all the magic to happen...
        MyPointers.Dialog_CropImage.modal('hide');

        UndoManager.register(undefined, UndoCrop, [active.Id, undoUseClipping, undoClipX, undoClipY, undoClipWidth, undoClipHeight], '',
                             undefined, UndoCrop, [active.Id, active.UseClipping, active.ClipX, active.ClipY, active.ClipWidth, active.ClipHeight], '');
    };

    return CropHelperObject;
}();