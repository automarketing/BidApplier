/// <reference path="../SvgManip.js" />
/// <reference path="TextControlsBox.js" />

function MainControlsBox()
{
    this.TextControls = new TextControlsBox();
    this.ColorUpdateControls = new ColorUpdaterBox();



    //#region "Privates"


    //#endregion
    this.HideControlsBox = function ()
    {
        this.Private_HideMultiControlsBox();
        this.Private_HideSingleControlsBox();
    };

    this.Private_HideSingleControlsBox = function ()
    {

        MyPointers.Controls_ShapeControls.css("display", "none");

        this.TextControls.HideTextControlsBox();
        this.ColorUpdateControls.HideUpdateColors();
    };

    this.Private_HideMultiControlsBox = function ()
    {
        MyPointers.Controls_MultiShapeControls.css("display", "none");
    };

    this.DrawMainControlsBox = function ()//x, y, width, height, widthOffset)
    {
        var selectedCount = MyShapesState.Property_SelectedCount();

        if (selectedCount === 0)
            return;

        if (selectedCount === 1)
        {
            // var s1 = performance.now();
            this.Private_HideMultiControlsBox();
            // var s2 = performance.now();
            // console.log( s2 - s1 , 'Private_HideMultiControlsBox' );
            this.Private_DrawSingleShapeControlsBox();
            // var s3 = performance.now();
            // console.log( s3 - s2 , 'Private_DrawSingleShapeControlsBox' );
        }
        else
        {
            // var s1 = performance.now();
            this.Private_HideSingleControlsBox();
            // var s2 = performance.now();
            // console.log( s2 - s1 , 'M Private_HideSingleControlsBox' );
            this.Private_DrawMultipleShapeControlsBox();
            // var s3 = performance.now();
            // console.log( s3 - s2 , 'M Private_DrawMultipleShapeControlsBox' );
        }

    };

    this.Private_DrawMultipleShapeControlsBox = function ()
    {
        var s1 = performance.now();
        var areaBox = this.Private_CalculateMutlipleShapesArea();

        var x = areaBox.X;
        var y = areaBox.Y;
        var width = areaBox.Width;
        var height = areaBox.Height;

        var margin = 45;
        var maxWidth = MyPointers.Tabs.width() - margin;

        x += width + margin;
        var controlsWidth = MyPointers.Controls_MultiShapeControls.width();

        var rightMostControlX = x + controlsWidth;

        var coreSvgClientRect = GetGlobalById("CoreSvg").getBoundingClientRect();
        var coreSvgWidth = (coreSvgClientRect.width - 2);


        if (rightMostControlX > (MyPointers.SvgContainer.width() + MyPointers.SvgContainer.scrollLeft())
            || (rightMostControlX > coreSvgWidth && rightMostControlX > MyPointers.SvgContainer.width()))
        {
            x = areaBox.X - margin - controlsWidth;
        }

        if (y < MyPointers.SvgContainer.scrollTop())
        {
            y = MyPointers.SvgContainer.scrollTop() + 10;
        }

        var controlsLeftStart = StoryboardXtoPageX(x);
        var controlsTopStart = StoryboardYtoPageY(y);
        //var controlsLeftStart = x + StoryboardContainer.SvgContainerPositionLeft - MyPointers.SvgContainer.scrollLeft();
        // var controls = $("#controlsBox");

        var s2 = performance.now();
        console.log( s2 - s1 , 'StoryboardYtoPageY' );

        MyPointers.Controls_MultiShapeControls.css("display", "block");
        MyPointers.Controls_MultiShapeControls.css("left", controlsLeftStart);
        MyPointers.Controls_MultiShapeControls.css("top", controlsTopStart);

        var s3 = performance.now();
        console.log( s3 - s2 , 'css controlsTopStart ' );

        // Last but not least, color filters should be hidden for Safari5 anyways...
        if (MyBrowserProperties.IsSafari5 || MyBrowserProperties.IsOldIE)
        {
            $("#multiSelectControlsBoxTable tr.colorfilterrow").hide();
        } else
        {
            
            // Otherwise, we're safe: show the color filters
            $("#multiSelectControlsBoxTable tr.colorfilterrow").show();
            var s4 = performance.now();
            console.log( s4 - s3 , 'multiSelectControlsBoxTable show ' );

            var $dropdown = $('#multiSelectControlsBoxTable tr.colorfilterrow td.filter-dropdown-wrapper ul.dropdown-menu');

            // Control state of color filter icon, to indicate current state for the selected item.
            $dropdown.parent().find('button.btn.btn-label').html(MyLangMap.GetText("text-filter-select") + ' <span class="caret"></span>');

            var s5 = performance.now();
            console.log( s5 - s4 , 'multiSelectControlsBoxTable show ' );

            // Add active class to selected item
            $dropdown.find('li').removeClass('active');
            var s6 = performance.now();
            console.log( s6 - s5 , 'active' );

        }
    };

    this.Private_DrawSingleShapeControlsBox = function ()
    {
        console.log( '-------------------------------------------- ' );
        var stack = new Error().stack
        console.log( stack )
        
        var s1 = performance.now();
        var areaBox = this.Private_CalculateMutlipleShapesArea();

        var x = StoryboardXtoPageX(areaBox.X);
        var y = areaBox.Y; //StoryboardYtoPageY(areaBox.Y);
        var width = areaBox.Width;
        var height = areaBox.Height;

        var margin = 20;

        


        var shapeState = MyShapesState.Public_GetFirstSelectedShapeState();

        // leave room for rotation bar!
        if (shapeState.Angle % 180 >= 45 && shapeState.Angle % 180 <= 135)
        {
            margin += 25;
        }
        var s2 = performance.now();
        console.log( s2 - s1 , 'Public_GetFirstSelectedShapeState' );
        var textable = false; // = shapeState.IsTextable();
        var colorable =true ; // shapeState.Property_IsColorable();

        var posable = false;// shapeState.Public_IsPosable();
        var smartScene = true; // shapeState.Public_IsSmartScene();

        var controlsWidth = 300;//MyPointers.Controls_ShapeControls.width();
        var controlsHeight = 300;//MyPointers.Controls_ShapeControls.height();
        var movable = shapeState.Movable;

        var s3 = performance.now();
        console.log( s3 - s2 , 'Controls_ShapeControls height' );

        if (shapeState.IsLocked == true)
        {
            $("#lockButton").css("display", "none");
            $("#unlockButton").css("display", "");
        }
        else
        {
            $("#lockButton").css("display", "");
            $("#unlockButton").css("display", "none");
            
        }
        var s4 = performance.now();
        console.log( s4 - s3 , 'unlockButton css' );

        if (colorable)
        {
            //y -= 80;
            controlsWidth = Math.max(MyPointers.Controls_UpdateColor.width(), controlsWidth);
            controlsHeight += 10 + MyPointers.Controls_UpdateColor.height()
        }

        if (textable)
        {
            //if (UseSummerNote || UseQuill)
            //{
            //    controlsWidth = Math.max(controlsWidth, 450);
            //    controlsHeight += 10 + 45;
            //}
            //else
            //{
                controlsWidth = Math.max(MyPointers.Controls_TextableControls.width(), controlsWidth, 375);
                controlsHeight += 10 + MyPointers.Controls_TextableControls.height()
            //}
        }

        // x += width + margin;
        var s5 = performance.now();
        console.log( s5 - s4 , 'controlsHeight' );


        var windowLeftX = MyPointers.SvgContainer.scrollLeft();
        var windowRightX = MyPointers.SvgContainer.width() + MyPointers.SvgContainer.scrollLeft();

        var coreSvgClientRect = GetGlobalById("CoreSvg").getBoundingClientRect();
        var coreSvgWidth = (coreSvgClientRect.width - 2);

        var rightMostControlX = x + controlsWidth + MyPointers.SvgContainer.scrollLeft();

        

        if (rightMostControlX > windowRightX
            || (rightMostControlX > coreSvgWidth && rightMostControlX > MyPointers.SvgContainer.width()))
        {
            x = StoryboardXtoPageX(areaBox.X) - margin - controlsWidth;
            if (x < windowLeftX)
                x = windowLeftX + 10;
        }
        var s6 = performance.now();
        console.log( s6 - s5 , 'StoryboardXtoPageX' );

        if (movable == false)
        {
            controlsHeight -= (10 + MyPointers.Controls_ShapeControls.height());
        }
        var windowTop = MyPointers.SvgContainer.scrollTop();
        var windowBottom = MyPointers.SvgContainer.height() + MyPointers.SvgContainer.scrollTop();

        y = y - controlsHeight / 2;

        if (y < windowTop)
        {
            y = windowTop + 10;
        }

        if (y + controlsHeight > windowBottom)
        {
            y = Math.max(windowTop + 10, windowBottom - controlsHeight);
        }

        var controlsLeftStart = x;
        var controlsTopStart = StoryboardYtoPageY(y);

        var s7 = performance.now();
        console.log( s7 - s6 , 'controlsTopStart' );

        // we don't show basic controls on title boxes
        if (movable)
        {
            MyPointers.Controls_ShapeControls.css("display", "block");
            MyPointers.Controls_ShapeControls.css("left", controlsLeftStart);
            MyPointers.Controls_ShapeControls.css("top", controlsTopStart);
        }

        var s8 = performance.now();
        console.log( s8 - s7 , 'top css' );

        var posableRow = $("#EditPoseRow");
        var editItemOptions = $("#EditItemOptionsRow");

        posableRow.hide();
        editItemOptions.hide();

        if (posable)
        {
            if (shapeState.Public_IsInstaPosable())
            {
                posableRow.show();
            }
            else
            {
                editItemOptions.show();
            }
        }

         var s9 = performance.now();
        console.log( s9 - s8 , 'posable' );
   
        var editSceneRow = $("#EditSceneRow");
        if (smartScene)
            editSceneRow.show();
        else
            editSceneRow.hide();


        var s10 = performance.now();
        console.log( s10 - s9 , 'editSceneRow control' );

        var secondaryControlsTop = controlsTopStart;
        if (movable)
        {
            secondaryControlsTop += 10 + MyPointers.Controls_ShapeControls.height()
        }

        if (colorable)
        {
            this.ColorUpdateControls.Public_PrepColorControls(controlsLeftStart, secondaryControlsTop, shapeState);
        }
        var s11 = performance.now();
        console.log( s11 - s10 , 'ColorUpdateControls' );

        

        if (textable)
        {
            
            if (colorable)
            {
                 
                secondaryControlsTop += MyPointers.Controls_UpdateColor.height() + 10;
            }
 


            this.TextControls.PrepTextControls(MyPointers.Controls_TextableControls, controlsLeftStart, secondaryControlsTop, shapeState);
        }

        var s12 = performance.now();
        console.log( s12 - s11 , 'PrepTextControls' );


        // Last but not least, color filters should be hidden for Safari5 anyways...
        if (MyBrowserProperties.IsSafari5 || MyBrowserProperties.IsOldIE)
        {
            $("#controlsBoxTable tr.colorfilterrow").hide();
            $("#single-select-filter-dropdown").hide();
        }

        var s13 = performance.now();
        console.log( s13 - s12 , 'single-select-filter-dropdown' );


        /*
        if (shapeState.LockState === true) {
            $("#controlsBoxTable td.MenuLockItem").addClass('active');
        } else {
            $("#controlsBoxTable td.MenuLockItem").removeClass('active');
        }
        */
    };

    this.Private_CalculateMutlipleShapesArea = function ()
    {
        var left = undefined;
        var right = undefined;
        var top = undefined;
        var bottom = undefined;


        var selectedShapeStates = MyShapesState.Public_GetAllSelectedShapeStates();

        for (var i = 0; i < selectedShapeStates.length; i++)
        {
            boxArea = selectedShapeStates[i].Public_GetImaginaryOuterBox();
            if (left === undefined)
            {
                left = boxArea.Left;
                right = boxArea.Right;
                top = boxArea.Top;
                bottom = boxArea.Bottom;
            }

            left = Math.min(left, boxArea.Left);
            right = Math.max(right, boxArea.Right);
            top = Math.min(top, boxArea.Top);
            bottom = Math.max(bottom, boxArea.Bottom);

        }

        return { X: left, Y: top, Width: right - left, Height: bottom - top };

    };



}