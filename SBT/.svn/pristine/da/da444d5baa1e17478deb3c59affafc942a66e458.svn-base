/// <reference path="svgManip.js" />

function CroppedImageState(activeShape)
{
    this.CropViewScale;

    this.CropLeft = 0;
    this.CropTop = 0;
    this.CropWidth = 0;
    this.CropHeight = 0;

    this.Id = "CroppedImageCopy";

    this.IsResizing = false;
    this.ResizePageX = 0;
    this.ResizePageY = 0;
    this.CropResizeDirection = "";

    this.OriginalShapeId = "";
   

    this.PrepareShape = function (activeShape)
    {
        var cropState = this;
        MyPointers.Dialog_CropImage.one('shown.bs.modal', this.PrepareShapePostModalClosure(cropState, activeShape));

        //prevent showing the previous crop
        var cropAreaSvg = $("#CropAreaSvg");
        cropAreaSvg.children().remove();

        MyPointers.Dialog_CropImage.modal();
        

    };

    this.PrepareShapePostModalClosure = function (cropState, activeShape)
    {
        return function (e)
        {
            cropState.PrepareShapePostModal(e, cropState, activeShape);
        };
    };

    this.PrepareShapePostModal = function (e, cropState, activeShape)
    {
        //alert("ylo");
        //var cloneId = "CroppedImageCopy";   //UGH this is a hard copy of this.ID, because I don't properly understand scope // abs 12/20/13
        var cropAreaSvg = $("#CropAreaSvg");

        
        var clone = $("#" + activeShape.Id).clone();

        StoryboardContainer.UpdateGradientIds(clone);

        cropState.OriginalShape = activeShape.Id;

        clone.attr("id", cropState.Id);
        clone.attr("class", "");
        

        // Remove selection box and clip-path defs if present
        clone.find("[id$='selection_box'], [id$='_defs']").remove();

        // If there is a crop-group, reset it
        clone.find("[id$='cropGroup']").removeAttr("clip-path").attr("id", cropState.Id + "_cropGroup");

        // Translate the clone by 20px in both directions
        


        var scale = clone.find("[id$='_scale']").attr("id", cropState.Id + "_scale");
        clone.find("[id$='_natural']").attr("id", cropState.Id + "_natural");

        scale.attr("transform", "scale(1,1)");

        cropAreaSvg.children().remove();

        cropAreaSvg.attr("width", "450");
        cropAreaSvg.attr("height", "450");

        cropAreaSvg.append(clone);

        var bb = document.getElementById(cropState.Id).getBBox();
        cropState.CropViewScale = 430 / Math.max(bb.width, bb.height);
        //this.CropViewScale = 1;
        scale.attr("transform", "scale(" + cropState.CropViewScale + ")");

        // NO FUCKING clue why this needs to happen here... but the bounding box of the svg is getting moved...  i feel like this happened elsewhere and we solved it...  is it due to bootstrap modal windows? //abs 1/13/14
        clone.attr("transform", "translate(10,10)");

        //var svgAreaBB = document.getElementById("CropAreaSvg").getBBox();
        //var offsetSvgContainerX =  (10-svgAreaBB.x); // if there are no issues it is (10-0) ==0, otherwise we want to keep the original 10, and see how much change there was from that spot // abs 1/13/14
        //var offsetSvgContainerY =  (10 - svgAreaBB.y);

        //clone.attr("transform", "translate(" + (10 + offsetSvgContainerX) + ", " + (10 + offsetSvgContainerY) + ")");

        //cropAreaSvg.attr("width", 1200);
        //cropAreaSvg.attr("height", 1200);

        bb = document.getElementById(cropState.Id).getBBox();

        //if (Math.abs(bb.x) > 10 || Math.abs(bb.y)>10)
        //{
        //    DebugLine("Bad bounding box on crop: " + bb.x + ", " + bb.y);
        //}

        cropState.CropLeft = 0;
        cropState.CropTop = 0;
        cropState.CropWidth = bb.width;
        cropState.CropHeight = bb.height;

        cropAreaSvg.attr("width", cropState.CropWidth + 20);
        cropAreaSvg.attr("height", cropState.CropHeight + 20);

        if (activeShape.UseClipping)
        {
            cropState.CropLeft = activeShape.ClipX * cropState.CropViewScale;
            cropState.CropTop = activeShape.ClipY * cropState.CropViewScale;
            cropState.CropWidth = activeShape.ClipWidth * cropState.CropViewScale;
            cropState.CropHeight = activeShape.ClipHeight * cropState.CropViewScale;
        }

        cropAreaSvg.mousemove(MoveCropResize);
        cropAreaSvg.mouseleave(StopCropResize);
        cropAreaSvg.mouseup(StopCropResize);

        cropState.AddSelectors();

    };



    this.UpdateDrawing = function ()
    {
        //this.AddSelectors();
        this.UpdateSelectors();

    };

    this.UpdateSelectors = function ()
    {
        var cropAreaBox = $("#CropAreaBox");
       
        var nw_circle = $("#" + this.Id + "_nw_circle");
        var ne_circle = $("#" + this.Id + "_ne_circle");
        var sw_circle = $("#" + this.Id + "_sw_circle");
        var se_circle = $("#" + this.Id + "_se_circle");

        var n_circle = $("#" + this.Id + "_n_circle ");
        var s_circle = $("#" + this.Id + "_s_circle ");
        var w_circle = $("#" + this.Id + "_w_circle ");
        var e_circle = $("#" + this.Id + "_e_circle ");

        var left = this.CropLeft;
        var right = this.CropWidth + this.CropLeft;
        var top = this.CropTop;
        var bottom = this.CropHeight + this.CropTop;
        var middleX = (left + right) / 2;
        var middleY = (top + bottom) / 2;

        SvgCreator.UpdateRectangle(cropAreaBox, this.CropLeft, this.CropTop, this.CropWidth, this.CropHeight);
        

        SvgCreator.UpdateCircle(nw_circle, left, top);
        SvgCreator.UpdateCircle(ne_circle, right, top);
        SvgCreator.UpdateCircle(sw_circle, left, bottom );
        SvgCreator.UpdateCircle(se_circle, right, bottom);
                                         
        SvgCreator.UpdateCircle(n_circle, middleX, top);
        SvgCreator.UpdateCircle(s_circle, middleX, bottom);
        SvgCreator.UpdateCircle(w_circle, left, middleY);
        SvgCreator.UpdateCircle(e_circle,right, middleY);
    }

    this.AddSelectors = function ()
    {
        var g = $("#croppedImageCopy_ClipArea");
        if (g !== null || g.length > 0)
        {
            g.detach();
        }
        g = SvgCreator.CreateSvgGroup("croppedImageCopy_ClipArea");

        $("#" + this.Id).append(g);
        

        g.appendChild(SvgCreator.AddRect(this.CropLeft, this.CropTop, this.CropWidth, this.CropHeight, "black", "red", "4,4", ".25", "CropAreaBox"));


        if (MyBrowserProperties.IsMobile)
        {
            this.AddMobileSelectors(g);
        }
        else
        {
            this.AddComputerSelectors(g);
        }
    };

    this.AddMobileSelectors = function (g)
    {


        // g.appendChild(SvgCreator.AddRect(this.CropLeft, this.CropTop, this.CropWidth, this.CropHeight, "black", "red", "4,4", ".25", "CropAreaBox"));
        var cropAreaBox = $("#CropAreaBox");
        cropAreaBox.css("border-width", 5);
        

        var strokeColor = "#AAA393";
        var fillColor = "#6285C7";

        var left = this.CropLeft;
        var right = this.CropWidth + this.CropLeft;
        var top = this.CropTop;
        var bottom = this.CropHeight + this.CropTop;
        var circleSize = 13;

        g.appendChild(SvgCreator.AddCircle(left, top, circleSize, strokeColor, fillColor, this.Id + "_nw_circle", "ResizeNW"));
        g.appendChild(SvgCreator.AddCircle(right, top, circleSize, strokeColor, fillColor, this.Id + "_ne_circle", "ResizeNE"));
        g.appendChild(SvgCreator.AddCircle(left, bottom, circleSize, strokeColor, fillColor, this.Id + "_sw_circle", "ResizeNE"));
        g.appendChild(SvgCreator.AddCircle(right, bottom, circleSize, strokeColor, fillColor, this.Id + "_se_circle", "ResizeNW"));

        var a = fillColor;
        fillColor = strokeColor;
        strokeColor = a;
        var middleX = (left + right) / 2;
        var middleY = (top + bottom) / 2;
        g.appendChild(SvgCreator.AddCircle(middleX, top, circleSize - 2, strokeColor, fillColor, this.Id + "_n_circle", "ResizeV"));
        g.appendChild(SvgCreator.AddCircle(middleX, bottom, circleSize - 2, strokeColor, fillColor, this.Id + "_s_circle", "ResizeV"));
        g.appendChild(SvgCreator.AddCircle(left, middleY, circleSize - 2, strokeColor, fillColor, this.Id + "_w_circle", "ResizeH"));
        g.appendChild(SvgCreator.AddCircle(right, middleY, circleSize - 2, strokeColor, fillColor, this.Id + "_e_circle", "ResizeH"));

        this.PrivateSetTouchyEdgeHandlers(this.Id + "_ne_circle", TouchyCropResize);
        this.PrivateSetTouchyEdgeHandlers(this.Id + "_nw_circle", TouchyCropResize);
        this.PrivateSetTouchyEdgeHandlers(this.Id + "_se_circle", TouchyCropResize);
        this.PrivateSetTouchyEdgeHandlers(this.Id + "_sw_circle", TouchyCropResize);

        this.PrivateSetTouchyEdgeHandlers(this.Id + "_n_circle", TouchyCropResize);
        this.PrivateSetTouchyEdgeHandlers(this.Id + "_s_circle", TouchyCropResize);
        this.PrivateSetTouchyEdgeHandlers(this.Id + "_e_circle", TouchyCropResize);
        this.PrivateSetTouchyEdgeHandlers(this.Id + "_w_circle", TouchyCropResize);

        // this.PrivateSetTouchyEdgeHandlers("CropAreaBox" , TouchyCropResize);
    };

    this.PrivateSetTouchyEdgeHandlers = function (id, touchyDragEvent)
    {
        $("#" + id).bind('touchy-drag', touchyDragEvent);
        //$("#" + id).data('touchy-drag').settings.msHoldThresh = 10;
    }

    this.AddComputerSelectors = function (g)
    {
        var strokeColor = "#AAA393";
        var fillColor = "#6285C7";

        var left = this.CropLeft;
        var right = this.CropWidth + this.CropLeft;
        var top = this.CropTop;
        var bottom = this.CropHeight + this.CropTop;
        var circleSize = 5;

        if (MyBrowserProperties.IsMobile)
        {
            circleSize = 10;
        }

        g.appendChild(SvgCreator.AddCircle(left, top, circleSize, strokeColor, fillColor, this.Id + "_nw_circle", "ResizeNW"));
        g.appendChild(SvgCreator.AddCircle(right, top, circleSize, strokeColor, fillColor, this.Id + "_ne_circle", "ResizeNE"));
        g.appendChild(SvgCreator.AddCircle(left, bottom, circleSize, strokeColor, fillColor, this.Id + "_sw_circle", "ResizeNE"));
        g.appendChild(SvgCreator.AddCircle(right, bottom, circleSize, strokeColor, fillColor, this.Id + "_se_circle", "ResizeNW"));

        var a = fillColor;
        fillColor = strokeColor;
        strokeColor = a;
        var middleX = (left + right) / 2;
        var middleY = (top + bottom) / 2;
        g.appendChild(SvgCreator.AddCircle(middleX, top, circleSize - 2, strokeColor, fillColor, this.Id + "_n_circle", "ResizeV"));
        g.appendChild(SvgCreator.AddCircle(middleX, bottom, circleSize - 2, strokeColor, fillColor, this.Id + "_s_circle", "ResizeV"));
        g.appendChild(SvgCreator.AddCircle(left, middleY, circleSize - 2, strokeColor, fillColor, this.Id + "_w_circle", "ResizeH"));
        g.appendChild(SvgCreator.AddCircle(right, middleY, circleSize - 2, strokeColor, fillColor, this.Id + "_e_circle", "ResizeH"));

        this.Private_SetEdgeHandlers(this.Id + "_ne_circle", StartCropResize, MoveCropResize, StopCropResize);
        this.Private_SetEdgeHandlers(this.Id + "_nw_circle", StartCropResize, MoveCropResize, StopCropResize);
        this.Private_SetEdgeHandlers(this.Id + "_se_circle", StartCropResize, MoveCropResize, StopCropResize);
        this.Private_SetEdgeHandlers(this.Id + "_sw_circle", StartCropResize, MoveCropResize, StopCropResize);

        this.Private_SetEdgeHandlers(this.Id + "_n_circle", StartCropResize, MoveCropResize, StopCropResize);
        this.Private_SetEdgeHandlers(this.Id + "_s_circle", StartCropResize, MoveCropResize, StopCropResize);
        this.Private_SetEdgeHandlers(this.Id + "_e_circle", StartCropResize, MoveCropResize, StopCropResize);
        this.Private_SetEdgeHandlers(this.Id + "_w_circle", StartCropResize, MoveCropResize, StopCropResize);

        //var cropAreaBox = $("#CropAreaBox");
        //cropAreaBox.css("cursor", "hand");

        //this.Private_SetEdgeHandlers("CropAreaBox", StartCropMove, MoveCropMove, StopCropMove);
    };

    this.Private_SetEdgeHandlers = function (id, mouseDownEvent, mouseMove, mouseLeaveEvent)
    {
        $("#" + id).mousedown(mouseDownEvent);
    };

    this.RemoveCrop = function ()
    {
        var active = this.Private_GetImageBeingCropped();
        active.UseClipping = false;
        active.UpdateDrawing();
        MyPointers.Dialog_CropImage.modal('hide');

        UndoManager.register(undefined, UndoCrop, [active.Id, true, active.ClipX, active.ClipY, active.ClipWidth, active.ClipHeight], '', undefined, UndoCrop, [active.Id, active.UseClipping, active.ClipX, active.ClipY, active.ClipWidth, active.ClipHeight], '');
    };

    this.UpdateCrop = function ()
    {
        var active = this.Private_GetImageBeingCropped();

        var undoUseClipping = active.UseClipping;
        var undoClipX = active.ClipX;
        var undoClipY = active.ClipY;
        var undoClipWidth = active.ClipWidth;
        var undoClipHeight = active.ClipHeight;

        active.UseClipping = true;
        active.ClipX = MyCroppedImage.CropLeft / MyCroppedImage.CropViewScale;
        active.ClipY = MyCroppedImage.CropTop / MyCroppedImage.CropViewScale;
        active.ClipWidth = MyCroppedImage.CropWidth / MyCroppedImage.CropViewScale;
        active.ClipHeight = MyCroppedImage.CropHeight / MyCroppedImage.CropViewScale;

        var bb = active.GetBBox(false);  // this was assuming the value was true, but it is actually false...

        if (active.ClipX < 0)
        {
            active.ClipWidth += active.ClipX;
            active.ClipX = 0;

        }

        if (active.ClipY < 0)
        {
            active.ClipHeight += active.ClipY;
            active.ClipY = 0;
        }

        if (active.ClipWidth < 10)
            active.ClipWidth = 10;

        if (active.ClipHeight < 10)
            active.ClipHeight = 10;

        if (active.ClipHeight > (bb.height / active.ScaleY))
            active.ClipHeight = bb.height / active.ScaleY;

        if (active.ClipWidth > (bb.width / active.ScaleX))
            active.ClipWidth = bb.width / active.ScaleX;

        UpdateActiveDrawing();
        UpdateActiveDrawing();// need to call it twice for all the magic to happen...
        MyPointers.Dialog_CropImage.modal('hide');

        UndoManager.register(undefined, UndoCrop, [active.Id, undoUseClipping, undoClipX, undoClipY, undoClipWidth, undoClipHeight], '', undefined, UndoCrop, [active.Id, active.UseClipping, active.ClipX, active.ClipY, active.ClipWidth, active.ClipHeight], '');

    };

    this.CancelCrop = function ()
    {
        MyPointers.Dialog_CropImage.modal('hide');
        var active = this.Private_GetImageBeingCropped();
        active.UpdateDrawing();
    };

    this.Private_GetImageBeingCropped = function ()
    {
        var active = MyShapesState.Public_GetFirstSelectedShapeState();;

        if (active === null)
        {
            active = MyShapesState.Public_GetShapeStateById(MyCroppedImage.OriginalShapeId);
        }

        return active;
    };

    this.HandleCropResize = function (e)
    {
        if (this.IsResizing == false)
            return;

        deltaX = e.pageX - this.ResizePageX;
        deltaY = e.pageY - this.ResizePageY;

        this.ResizePageX = e.pageX;
        this.ResizePageY = e.pageY;

        this.Private_UpdateCropBox(deltaX, deltaY);
    };

    this.HandleTouchyCropResize = function (data, id)
    {
        if (id != null)
        {
            this.CropResizeDirection = DetermineResizeDirection(id.toLowerCase());
        }
        if (this.CropResizeDirection == null || this.CropResizeDirection == undefined)
            return;

        var deltaX = data.movePoint.x - data.lastMovePoint.x;
        var deltaY = data.movePoint.y - data.lastMovePoint.y;

        this.Private_UpdateCropBox(deltaX, deltaY);

    };

    this.Private_UpdateCropBox = function (deltaX, deltaY)
    {
        // handle X changes first
        switch (this.CropResizeDirection)
        {
            case ResizeEnum.W:
            case ResizeEnum.NW:
            case ResizeEnum.SW:
                {
                    this.CropLeft += deltaX;
                    this.CropWidth -= deltaX;
                    break;
                }
            case ResizeEnum.E:
            case ResizeEnum.NE:
            case ResizeEnum.SE:
                {
                    //MyCroppedImage.CropLeft += deltaX;
                    this.CropWidth += deltaX;
                    break;
                }
        }

        // handle Y changes first
        switch (this.CropResizeDirection)
        {
            case ResizeEnum.N:
            case ResizeEnum.NW:
            case ResizeEnum.NE:
                {
                    this.CropTop += deltaY;
                    this.CropHeight -= deltaY;
                    break;
                }
            case ResizeEnum.S:
            case ResizeEnum.SW:
            case ResizeEnum.SE:
                {
                    //MyCroppedImage.CropLeft += deltaX;
                    this.CropHeight += deltaY;
                    break;
                }
        }
        this.UpdateDrawing();
    };


    this.StartCropResize = function (e, id)
    {
        this.IsResizing = true;
        this.ResizePageX = e.pageX;
        this.ResizePageY = e.pageY;

        this.CropResizeDirection = DetermineResizeDirection(id.toLowerCase());
    };

    this.StopCropResize = function ()
    {
        this.IsResizing = false;
    };

    this.PrepareShape(activeShape);

}