/// <reference path="../svgManip.js" />
function ShapesState()
{
    //#region Privates

    this.Private_CurrentShapeAction = ShapeActionEnum.Nothing;
    this.Private_SelectedShapes = new Array();
    this.Private_ShapeStates = new Object();

    //#endregion

    //#region "Properties"


}

ShapesState.prototype.Property_SetCurrentShapeAction = function (action)
{
    this.Private_CurrentShapeAction = action;
};

ShapesState.prototype.Property_GetCurrentShapeAction = function ()
{
    return this.Private_CurrentShapeAction;
};

ShapesState.prototype.Property_SelectedCount = function ()
{
    return this.Private_SelectedShapes.length;
};

ShapesState.prototype.Property_GetShapeStatesCount = function ()
{
    var shapeCount = 0;
    try
    {
        for (shapeStateId in this.Private_ShapeStates)
        {
            if (shapeStateId != null)
            {
                var shapeState = this.Public_GetShapeStateById(shapeStateId);
                if (shapeState != null && shapeState.Movable)
                {
                    shapeCount++;
                }
                if (shapeState.Movable == false && shapeState.TextState != null)
                {
                    if (shapeState.TextState.DefaultText != shapeState.TextState.Text)  //adding text to a box should be enough to satisfy an item count! abs 1/20/15
                        shapeCount++;
                }
            }
        }
    }
    catch (e)
    {
        LogErrorMessage("ShapesState.Property_GetShapeStatesCount", e);
    }

    return shapeCount;
};

//#endregion

//#region "Publics"

//#region Shape States

//#region Shape States

ShapesState.prototype.Public_GetImageAttributions = function ()
{
    var allShapes = this.Public_GetAllShapeStates();
    var allAttributions = new Object();

    for (var i = 0; i < allShapes.length; i++)
    {
        var shapeState = allShapes[i];
        if (shapeState.ImageAttribution != null && shapeState.ImageAttribution.HasAttribution)
        {
            allAttributions[shapeState.ImageAttribution.PhotoId] = shapeState.ImageAttribution;
        }
    }

    return allAttributions;
};

ShapesState.prototype.Public_GetFirstSelectedShapeState = function ()
{
    if (this.Property_SelectedCount() == 0)
        return null;

    var id = this.Public_GetFirstSelectedShape().attr("id");

    var firstSelectedShape = this.Public_GetShapeStateById(id);

    if (firstSelectedShape == null)
    {
        if (id == null)
            LogErrorMessage("ShapeState.Public_GetFirstSelectedShapeState: firstSelectedShape is null & id is null");

        else
        {
            $("#" + id).remove();
            swal({ title: MyLangMap.GetText("warning-title-uh-oh"), text: MyLangMap.GetText("warning-corrupted-image") , type: "warning", confirmButtonText: MyLangMap.GetText("warning-ok-button") });
            MyShapesState.Public_ClearAllSelectedShapes();

            LogErrorMessage("ShapeState.Public_GetFirstSelectedShapeState: firstSelectedShape is null & ID is " + id + " total shapes state: " + this.Property_GetShapeStatesCount());
            try
            {
                var shapes = "";
                for (shapeState in this.Private_ShapeStates)
                {
                    shapes += shapeState + ", ";
                }
                LogErrorMessage("ShapeState.Public_GetFirstSelectedShapeState: Known Shape States: " + shapes);
            } catch (e)
            {

            }
        }
    }

    return firstSelectedShape;
};

ShapesState.prototype.Public_ClearDefaults = function ()
{
    this.Private_ClearUnusedShapes();
    for (var shapeState in this.Private_ShapeStates)
    {
        if (shapeState === null)
            continue;

        shapeState = this.Public_GetShapeStateById(shapeState);
        shapeState.Public_ClearDefaults();
    }
};


ShapesState.prototype.Public_GetAllShapeStates = function ()
{
    var allShapeStates = new Array();

    for (var shapeState in this.Private_ShapeStates)
    {
        if (shapeState === null)
            continue;

        shapeState = this.Public_GetShapeStateById(shapeState);
        allShapeStates.push(shapeState);
    }


    return allShapeStates;
};

ShapesState.prototype.Public_GetAllMovableShapeStates = function (checkLockState)
{
    checkLockState = (typeof checkLockState !== 'undefined') ? checkLockState : false;

    var shapeStates = this.Public_GetAllShapeStates();
    var movableShapeStates = new Array();

    for (var i = 0; i < shapeStates.length; i++)
    {
        var shapeState = shapeStates[i];
        // we hve some errors in the logger that imply shapestate is null in this method...
        if (shapeState == null)
            continue;

        if (checkLockState)
        {
            if (shapeState.IsLocked == true)
                continue;
        }

        if (shapeState.Movable == false)
            continue;

        movableShapeStates.push(shapeState);
    }


    return movableShapeStates;
};

ShapesState.prototype.Public_GetAllSelectedShapeStates = function ()
{
    var selectedShapeStates = new Array();

    if (this.Property_SelectedCount() == 0)
        return selectedShapeStates;

    for (var i = 0; i < this.Private_SelectedShapes.length; i++)
    {
        var id = this.Private_SelectedShapes[i].attr("id");
        selectedShapeStates.push(this.Private_ShapeStates[id]);
    }
    DebugLine("pDos");
    DebugLine(selectedShapeStates);

    return selectedShapeStates;
};

// if true we treat locked items as unmovable - good when moving items
// if false we ignore locked items - good for copy/delete
ShapesState.prototype.Public_GetAllSelectedMovableShapeStates = function (checkLockState )
{
    checkLockState = (typeof checkLockState !== 'undefined') ? checkLockState : false;

    var selectedShapeStates = new Array();

    if (this.Property_SelectedCount() == 0)
        return selectedShapeStates;

    for (var i = 0; i < this.Private_SelectedShapes.length; i++)
    {
        var id = this.Private_SelectedShapes[i].attr("id");

        if (checkLockState)
        {
            if (this.Private_ShapeStates[id].IsLocked == true)
                continue;
        }

        if (this.Private_ShapeStates[id].Movable == false) 
            continue;

        selectedShapeStates.push(this.Private_ShapeStates[id]);
    }

    return selectedShapeStates;
};


ShapesState.prototype.Public_GetShapeStateByShape = function (shape)
{
    return this.Public_GetShapeStateById(shape.attr("id"));
};

ShapesState.prototype.Public_GetShapeStateById = function (id)
{
    return this.Private_ShapeStates[id];
};

ShapesState.prototype.Public_RemoveShapeStateById = function (id)
{
    this.Public_UnselectShape($("#" + id));
    delete this.Private_ShapeStates[id];
};

ShapesState.prototype.Public_LoadShapeStatesFromJson = function (shapeStateJson)
{
    this.Private_ShapeStates = JSON.parse(shapeStateJson);
};

ShapesState.prototype.Public_SetShapeState = function (id, shapeState)
{
    this.Private_ShapeStates[id] = shapeState;
};

ShapesState.prototype.Public_ResetShapeStates = function ()
{
    this.Private_ShapeStates = new Object();
};

// will remove title/description boxes not being used
ShapesState.prototype.Private_ClearUnusedShapes = function ()
{
    var toBeDeleted = []
    for (id in MyShapesState.Private_ShapeStates)
    {
        try
        {
            var item = $("#" + id);

            if (item.length == 0)
            {
                toBeDeleted.push(id);
                continue;
            }
        } catch (e)
        {
            LogErrorMessage("ShapeStates.Public_ClearUnusedShapes", e);
        }
    }

    for (i = 0; i < toBeDeleted.length; i++)
    {
        this.Public_RemoveShapeStateById(toBeDeleted[i]);
    }
};

ShapesState.prototype.Public_ShapeStateToJson = function ()
{
    this.Private_ClearUnusedShapes();

    var jsonShapeState = JSON.stringify(
         this.Private_ShapeStates
         , function CensorShapeState(key, value)
         {
             if (key == "_SnapshotStateData")
             {
                 return undefined;
             }
             if (key == "Private_PreviousPoseList")
             {
                 return undefined;
             }
             if (key == "_TextStateDataProperties")
             {
                 return undefined;
             }
             if (key == "_SvgStateProperties")
             {
                 return undefined;
             }
             return value;
         }
     );

    return jsonShapeState;
    //  return $.jSEND(jsonShapeState);
};
//#endregion

//#region Selected Shapes
ShapesState.prototype.Public_GetFirstSelectedShape = function ()
{
    if (this.Property_SelectedCount() == 0)
        return null;

    return this.Private_SelectedShapes[0];
};

ShapesState.prototype.Public_GetAllSelectedShapes = function ()
{
    return this.Private_SelectedShapes;
};

//this.Public_GetAllMovableSelectedShapes = function ()
//{
//    return this.Private_SelectedShapes;
//};


ShapesState.prototype.Public_ClearAllSelectedShapes = function ()
{
    var shapeStates = this.Public_GetAllSelectedShapeStates();
    if (shapeStates != null)
    {
        for (var i = 0; i < shapeStates.length; i++)
        {
            if (shapeStates[i] != null)// this should NEVER be null..
            {
                shapeStates[i].SetActive(false);
                shapeStates[i].UpdateDrawing();
            }

        }
    }
    this.Private_SelectedShapes = new Array();
    this.Private_CurrentShapeAction = ShapeActionEnum.Nothing;
};

ShapesState.prototype.Public_UpdateSingleShapeAndAction = function (shape, action)
{
    this.Public_ClearAllSelectedShapes();
    this.Public_SelectShape(shape);
    this.Property_SetCurrentShapeAction(action);
};

ShapesState.prototype.Public_SelectShape = function (shape)
{
    if (this.Public_ShapeSelected(shape) == false)
    {
        this.Private_SelectedShapes.push(shape);
    }

    var shapeState = this.Public_GetShapeStateByShape(shape);
    if (shapeState != null)
        shapeState.SetActive(true);
};

ShapesState.prototype.Public_ShapeSelected = function (shape)
{
    return (this.Private_GetShapeIndex(shape) >= 0);
};

ShapesState.prototype.Public_UnselectShape = function (shape)
{
    var shapeState = this.Public_GetShapeStateByShape(shape);
    if (shapeState != null)
        shapeState.SetActive(false);

    var index = this.Private_GetShapeIndex(shape);
    if (index < 0)
        return;

    this.Private_SelectedShapes.splice(index, 1);
};

//#endregion

ShapesState.prototype.Private_GetShapeIndex = function (shape)
{
    var id = shape.attr("id");
    for (var i = 0; i < this.Private_SelectedShapes.length; i++)
    {
        if (id === this.Private_SelectedShapes[i].attr("id"))
        {
            return i;
        }
    }

    return -1;
};



//#endregion

//#endregion